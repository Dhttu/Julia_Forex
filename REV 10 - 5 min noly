
# support OE EA


begin # using block
    using CSV
    using DataFrames
    using Statistics
    using Dates
end

println("REV 10")
println("Start -> " , now())
global pip = 0.0001

history_path = "C:/Users/rgeyzer/AppData/Roaming/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/MQL5/Files/History (MetaQuotes-Demo)/"



@enum Color Red=-1 Green=1 NoColor =0

begin # base candles functions
    function CandleColor(index::Int)
        if h[index,3] > h[index,6]
            return Red
        end
        if h[index,3] < h[index,6]
            return Green
        end
        NoColor
    end

    function FindGRRatio(index::Int , length::Int)
        RedCounter = 0
        GreenCounter = 0
        candle = index
        for i in 1:length
            if CandleColor(candle) == Green
                GreenCounter +=1
            elseif CandleColor(candle) == Red
                RedCounter +=1
            end
            candle -=1
        end
        return round(GreenCounter / RedCounter; digits = 2)
    end
end

begin # populate function
    function PopulateM5(user_input_pair)
        user_input_tf = "M5"
        r = CSV.read(string(history_path ,user_input_pair ,user_input_tf, ".csv") , DataFrame)
        heder= ["Date" , "Time", "Open" , "High" , "Low"  , "Close" , "Volume"]
        rename!(r , heder)

        global h = DataFrame( Date = r[end-350000: end ,1], Time = r[end-350000: end,2]  ,  Open = r[end-350000: end,3], High = r[end-350000: end,4], Low = r[end-350000: end,5], Close = r[end-350000: end,6],
        GRRatioLast100_15M = 0.0, GRRatioLast150_15M = 0.0, GRRatioLast200_15M = 0.0 ,GRRatioLast250_15M = 0.0 ,GRRatioLast300_15M = 0.0, GRRatioLast400_15M = 0.0 ,GRRatioLast500_15M = 0.0 ,
        FirstPointValue = 0.0 ,SecondPointValue = 0.0 ,ThirdPointValue = 0.0 ,FourthPointValue = 0.0 , IntegratedScoreShort = 0.0 ,IntegratedScoreMid = 0.0 )
        #=
        j=1
        for i in names(h)
            println(j , " -> " , i)
            j +=1
        end
        =#
        for i in 510:nrow(h) - 30000
            j=7
            h[i+1,j] = FindGRRatio(i , 100) #GR Ratio
            j=j+1
            h[i+1,j] = FindGRRatio(i , 150) #GR Ratio
            j=j+1
            h[i+1,j] = FindGRRatio(i , 200) #GR Ratio
            j=j+1
            h[i+1,j] = FindGRRatio(i , 250) #GR Ratio
            j+=1
            h[i+1,j] = FindGRRatio(i , 300) #GR Ratio
            j=j+1
            h[i+1,j] = FindGRRatio(i , 400) #GR Ratio
            j=j+1
            h[i+1,j] = FindGRRatio(i , 500) #GR Ratio


            h.FirstPointValue[i] = round((h[i+30 , 3]-h[i,3])/pip; digits = 1) #2.5 hours
            h.SecondPointValue[i] = round((h[i+150 , 3]-h[i,3])/pip; digits = 1) #12 hours
            h.ThirdPointValue[i] = round((h[i+500 , 3]-h[i,3])/pip; digits = 1) #40 hours
            h.FourthPointValue[i] = round((h[i+1500 , 3]-h[i,3])/pip; digits = 1) # 1 week
            TempMax = maximum(h[i:i+29 , 4])-h[i,3]
            TempMin = h[i,3]-minimum(h[i:i+29 , 5])
            TempMax2 = maximum(h[i:i+149 , 4])-h[i,3]
            TempMin2 = h[i,3] - minimum(h[i:i+149 , 5])
            TempMax3 = maximum(h[i:i+499 , 4])-h[i,3]
            TempMin3 = h[i,3]-minimum(h[i:i+499 , 5])

            h.IntegratedScoreShort[i] = 0.05 * TempMax + 0.05*TempMin  +0.1*TempMax2 + 0.15 * TempMin2 + 0.15 * h.FirstPointValue[i] + 0.1 * h.ThirdPointValue[i] + 0.4* h.SecondPointValue[i]
            h.IntegratedScoreMid[i] = 0.05 * TempMax2 + 0.05*TempMin2  +0.1*TempMax3 + 0.15 * TempMin3 + 0.15 * h.SecondPointValue[i] + 0.1 * h.FourthPointValue[i] + 0.4* h.ThirdPointValue[i]
        end

        insertcols!(h, 3, :Hour => 0)
        for i in 510:nrow(h)-30000
            h.Hour[i] = hour(h.Time[i])
        end
        return h
    end


    function CreateFile(user_input_pair , file_name)
        history_path = "C:/Users/rgeyzer/AppData/Roaming/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/MQL5/Files/History (MetaQuotes-Demo)/"
        CSV.write(string(history_path ,user_input_pair ,file_name, ".csv") , finalDF[:,:])
    end
end

function crete_file_for_pair(user_input_pair) # load data and creat DB + file
    println("Started -> " , user_input_pair ," ,at -> " , now())

    if !isnothing(findfirst("JPY" , user_input_pair))||!isnothing(findfirst("XAU" , user_input_pair))
        pip = 0.01
    else
        pip = 0.0001
    end

    println("pip value is: " , pip)
    println("load data started -> " , now())
    h = PopulateM5(user_input_pair)

    println("Finished DB creation -> " , now())
    #println(describe(h))
    first_value = nrow(h) - 340000

    global finalDF = DataFrame(h[first_value:end-40000,:])
    CreateFile(user_input_pair , "Rev10 5m file")
    println("Finished writing file -> " , now())
    #println(describe(finalDF))
    println(user_input_pair , " -> Finished all -> "  , now())
    #CSV.write(string(history_path , "testfile.csv") , h[end-120000:end-110000,:])
end



pairs = ["AUDCAD" , "AUDCHF"  ,"AUDJPY" ,"AUDNZD","AUDUSD","CADCHF","CADJPY","CHFJPY","EURAUD","EURCAD","EURCHF","EURGBP","EURJPY","EURNZD","EURUSD",
          "GBPAUD" ,"GBPCAD","GBPCHF","GBPJPY","GBPNZD","GBPUSD","NZDCAD","NZDCHF","NZDJPY","NZDUSD","USDCAD","USDCHF","USDJPY","XAUUSD"]

for pair in pairs
    crete_file_for_pair(pair)
end
