begin # using block
    using CSV
    using DataFrames
    using Statistics
    using Dates
    using Query
end

using Pkg
Pkg.add("DataFrames")


function LoadData(file_name)
    history_path = "C:/Users/rgeyzer/AppData/Roaming/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/MQL5/Files/History (MetaQuotes-Demo)/"
    user_input_pair = "EURUSD"
    pip = 0.0001
    a = CSV.read(string(history_path ,user_input_pair ,file_name, ".csv") , DataFrame)
    temp = DataFrame(i = 1:nrow(a) , Date = a[:,1], Time = a[:,2] , Hour = 0 ,  Open = a[:,3], High = a[:,4], Low = a[:,5], Close = a[:,6], Volume = a[:,7]
                                                            ,Open5 = 0.0,   High5 = 0.0,   Low5 = 0.0,   Close5 = 0.0
                                                            ,Open15 = 0.0,  High15 = 0.0,  Low15 = 0.0,  Close15 = 0.0
                                                            ,OpenH = 0.0,   HighH = 0.0,   LowH = 0.0,   CloseH = 0.0
                                                            ,OpenD = 0.0,   HighD = 0.0,   LowD = 0.0,   CloseD = 0.0,
        V20 = 0.0, V50 = 0.0, V100 = 0.0, V200 = 0.0, V1K = 0.0, V2K = 0.0 , MaxV2K = 0.0, MinV2K = 0.0, V5K = 0.0, V10K = 0.0, V20K = 0.0, MaxV20K = 0.0, MinV20K = 0.0,

     Color = NoColor ,ThrClr = "" , ChngV = 0.0 , ChngP = 0.0 , BSize = 0.0 , CSize = 0.0 , Doji = false , Ham = false , InvHam = false , MornStar = false ,
     HHLL = false , Engulf = false , Out = false , In = false, LastIn = 0 , BreakOutFrom = 0 , BodyBiggerThan = 0 , CandleBiggerThan = 0 , CountMarb = 0 ,
     SMA20V = 0.0 , SMA20S = 0.0 , SMA20Di = 0 , SMA50V = 0.0 , SMAsDi = 0.0 , ATR = 0 , RSI = 0, RSIS = 0,

     Color5M = NoColor,ThrClr5M = "" ,ChngV5M = 0.0 , ChngP5M = 0.0 , BSize5M = 0.0 , CSize5M = 0.0 , Doji5M = false , Ham5M = false , InvHam5M = false , MornStar5M = false ,
     HHLL5M = false , Engulf5M = false , Out5M = false , In5M = false, LastIn5M = 0 , BreakOutFrom5M = 0 , BodyBiggerThan5M = 0 , CandleBiggerThan5M = 0 , CountMarb5M = 0 ,
     SMA20V5M = 0.0 , SMA20S5M = 0.0 , SMA20Di5M = 0 , SMA50V5M = 0.0 , SMAsDi5M = 0.0 , ATR5M = 0 , RSI5M = 0, RSIS5M = 0,
     #1M stats on 5M candles
     CountGreen5M1M = 0, CountRed5M1M = 0, MaxChngV5M1M = 0.0, MaxChngP5M1M = 0.0,MinChngV5M1M = 0.0, MinChngP5M1M = 0.0, MaxBSize5M1M = 0.0, MaxCSize5M1M = 0.0 ,
     CountDoji5M1M = 0, CountHam5M1M = 0, CountInvHam5M1M = 0, CountMornStar5M1M = 0, CountHHLL5M1M = 0 , CountEngulf5M1M = 0, CountOut5M1M = 0 , CountIn5M1M = 0 ,
     MaxLastIn5M1M = 0, MaxBreakOutFrom5M1M = 0, MaxBodyBiggerThan5M1M = 0, MaxCandleBiggerThan5M1M = 0, MaxCountMarb5M1M = 0, MaxRSIS5M1M = 0, MinRSIS5M1M = 0,

     Color15M= NoColor,ThrClr15M = "" ,ChngV15M = 0.0, ChngP15M = 0.0, BSize15M = 0.0, CSize15M = 0.0, Doji15M = false, Ham15M = false, InvHam15M = false, MornStar15M = false,
     HHLL15M = false, Engulf15M = false, Out15M = false , In15M = false, LastIn15M = 0, BreakOutFrom15M = 0, BodyBiggerThan15M = 0, CandleBiggerThan15M = 0, CountMarb15M = 0,
     SMA20V15M = 0.0 , SMA20S15M = 0.0 , SMA20Di15M = 0 , SMA50V15M = 0.0 , SMAsDi15M = 0.0 , ATR15M = 0 , RSI15M = 0, RSIS15M = 0,
     #5M stats on 15M candles
     CountGreen15M5M = 0, CountRed15M5M = 0, MaxChngV15M5M = 0.0, MaxChngP15M5M = 0.0,MinChngV15M5M = 0.0, MinChngP15M5M = 0.0, MaxBSize15M5M = 0.0, MaxCSize15M5M = 0.0 ,
     CountDoji15M5M = 0, CountHam15M5M = 0, CountInvHam15M5M = 0, CountMornStar15M5M = 0, CountHHLL15M5M = 0 , CountEngulf15M5M = 0, CountOut15M5M = 0 , CountIn15M5M = 0 ,
     MaxLastIn15M5M = 0, MaxBreakOutFrom15M5M = 0, MaxBodyBiggerThan15M5M = 0, MaxCandleBiggerThan15M5M = 0, MaxCountMarb15M5M = 0, MaxRSIS15M5M = 0, MinRSIS15M5M = 0,

     ColorH = NoColor,ThrClrH = "" ,ChngVH = 0.0 , ChngPH = 0.0 , BSizeH = 0.0 , CSizeH = 0.0 , DojiH = false , HamH = false , InvHamH = false , MornStarH = false ,
     HHLLH = false , EngulfH = false , OutH = false , InH = false, LastInH = 0 ,BreakOutFromH = 0 , BodyBiggerThanH = 0 , CandleBiggerThanH = 0 , CountMarbH = 0 ,
     SMA20VH = 0.0 , SMA20SH = 0.0 , SMA20DiH = 0 , SMA50VH = 0.0 , SMAsDiH = 0.0 , ATRH = 0 , RSIH = 0,RSISH = 0,
      #15M stats on 1H candles
      CountGreenH15M = 0, CountRedH15M = 0, MaxChngVH15M = 0.0, MaxChngPH15M = 0.0, MinChngVH15M = 0.0, MinChngPH15M = 0.0, MaxBSizeH15M = 0.0, MaxCSizeH15M = 0.0 ,
      CountDojiH15M = 0, CountHamH15M = 0, CountInvHamH15M = 0, CountMornStarH15M = 0, CountHHLLH15M = 0 , CountEngulfH15M = 0, CountOutH15M = 0 , CountInH15M = 0 ,
      MaxLastInH15M = 0, MaxBreakOutFromH15M = 0, MaxBodyBiggerThanH15M = 0, MaxCandleBiggerThanH15M = 0, MaxCountMarbH15M = 0, MaxRSISH15M = 0, MinRSISH15M = 0,

     ColorD = NoColor,ThrClrD = "" ,ChngVD = 0.0 , ChngPD = 0.0 , BSizeD = 0.0 , CSizeD = 0.0 , DojiD = false , HamD = false , InvHamD = false , MornStarD = false ,
     HHLLD = false , EngulfD = false , OutD = false , InD = false, LastInD = 0 ,BreakOutFromD = 0 , BodyBiggerThanD = 0 , CandleBiggerThanD = 0 , CountMarbD = 0 ,
     SMA20VD = 0.0 , SMA20SD = 0.0 , SMA20DiD = 0 , SMA50VD = 0.0 , SMAsDiD = 0.0 , ATRD = 0 , RSID = 0, RSISD = 0)
     return temp
end

h = LoadData("FinalRev2")

describe(h)






#=

CountRR = 0 ; SumRR = 0.0 ; CountRG = 0 ; SumRG = 0.0 ; CountGR = 0 ; SumGR = 0.0 ; CountGG = 0 ; SumGG = 0.0
Counter = 0
FindNextCandle(10000 , H1)
for i in 10000:nrow(h)-100000
    if IsCandle(i , H1)
        Counter = Counter + 1
        if CandleColor(i , H1) == Green
            if CandleColor(FindLastCandle(i , H1) , H1) == Green
                CountGG = CountGG + 1
                SumGG = SumGG + h.ChngVH[FindNextCandle(i , H1)]
            elseif CandleColor(FindLastCandle(i , H1) , H1) == Red
                CountGR = CountGR + 1
                SumGR = SumGR + h.ChngVH[FindNextCandle(i , H1)]
            end
        elseif CandleColor(i , H1) == Red
            if CandleColor(FindLastCandle(i , H1) , H1) == Green
                CountRG = CountRG + 1
                SumRG = SumRG + h.ChngVH[FindNextCandle(i , H1)]
            elseif CandleColor(FindLastCandle(i , H1) , H1) == Red
                CountRR = CountRR + 1
                SumRR = SumRR + h.ChngVH[FindNextCandle(i , H1)]
            end
        end
    end
end


Counter
println("***")
println("done , counter is ",Counter)


println( SumRR, "  "  ,  "  ", SumRG, "  "  ,  "  "  , SumGR, "  "  ,"  "  , SumGG )


GGG = []
GGR = []
GRG = []
GRR = []
RGG = []
RGR = []
RRG = []
RRR = []


for i in 20000:nrow(h)-20000
    if IsCandle(i , H1)
        if CandleColor(i , H1) == Green
            if CandleColor(FindLastCandle(i , H1) , H1) == Green
                if (CandleColor(FindLastCandle(FindLastCandle(i , H1) , H1) , H1) == Green)
                    push!(GGG ,h.ChngVH[FindNextCandle(i , H1)])
                elseif (CandleColor(FindLastCandle(FindLastCandle(i , H1) , H1) , H1) == Red)
                    push!(GGR ,h.ChngVH[FindNextCandle(i , H1)])
                end
            elseif CandleColor(FindLastCandle(i , H1) , H1) == Red
                if (CandleColor(FindLastCandle(FindLastCandle(i , H1) , H1) , H1) == Green)
                    push!(GRG ,h.ChngVH[FindNextCandle(i , H1)])
                elseif (CandleColor(FindLastCandle(FindLastCandle(i , H1) , H1) , H1) == Red)
                    push!(GRR ,h.ChngVH[FindNextCandle(i , H1)])
                end
            end
        elseif CandleColor(i , H1) == Red
            if CandleColor(FindLastCandle(i , H1) , H1) == Green
                if (CandleColor(FindLastCandle(FindLastCandle(i , H1) , H1) , H1) == Green)
                    push!(RGG ,h.ChngVH[FindNextCandle(i , H1)])
                elseif (CandleColor(FindLastCandle(FindLastCandle(i , H1) , H1) , H1) == Red)
                    push!(RGR ,h.ChngVH[FindNextCandle(i , H1)])
                end
            elseif CandleColor(FindLastCandle(i , H1) , H1) == Red
                if (CandleColor(FindLastCandle(FindLastCandle(i , H1) , H1) , H1) == Green)
                    push!(RRG ,h.ChngVH[FindNextCandle(i , H1)])
                elseif (CandleColor(FindLastCandle(FindLastCandle(i , H1) , H1) , H1) == Red)
                    push!(RRR ,h.ChngVH[FindNextCandle(i , H1)])
                end
            end
        end
    end
end

=#
